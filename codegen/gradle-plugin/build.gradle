plugins {
    id 'com.gradle.plugin-publish' version '0.10.1'
}

apply plugin: "java-gradle-plugin"
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "maven"

group "me.shika.di"

configurations {
    embedded {
        transitive = false
    }
    implementation.extendsFrom(embedded)
}

def ARTIFACT_ID = "dagger-compiler-plugin"

pluginBundle {
    website = 'https://github.com/ShikaSD/kotlin-compiler-di'
    vcsUrl = 'https://github.com/ShikaSD/kotlin-compiler-di.git'
    tags = ['kotlin', 'compiler-plugin', 'di', 'dagger2']

    plugins {
        diPlugin {
            displayName = "Dagger 2 Kotlin compiler plugin"
            description = "Experiment on implementation of dagger2 code generation through Kotlin compiler"
        }
    }

    mavenCoordinates {
        groupId = project.getGroup()
        artifactId = ARTIFACT_ID
        version = project.getVersion()
    }
}

install {
    repositories {
        mavenInstaller {
            pom.artifactId = ARTIFACT_ID
        }
    }
}

gradlePlugin {
    plugins {
        diPlugin {
            id = "me.shika.$ARTIFACT_ID"
            implementationClass = "me.shika.di.DiCompilerPlugin"
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-gradle-plugin-api"

    embedded project(':codegen:kotlin-plugin')
    embedded project(':common:build-info')
    embedded project(':common:gradle-base')

    embeddedProjects().collect { it.configurations.findByName("published") }
        .forEach {
            if (it == null) return
            it.dependencies.forEach {
                runtimeOnly "$it.group:$it.name:$it.version"
            }
        }
}

jar {
    from project.configurations.embedded.collect {
        zipTree(it)
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from embeddedProjects().collect { it.sourceSets.main.allSource }
}

artifacts {
    archives sourcesJar
}

def embeddedProjects() {
    return project.configurations.findByName('embedded')
        .resolvedConfiguration
        .resolvedArtifacts
        .findAll { it.id.componentIdentifier instanceof ProjectComponentIdentifier }
        .collect { project(it.id.componentIdentifier.projectPath) }
}

